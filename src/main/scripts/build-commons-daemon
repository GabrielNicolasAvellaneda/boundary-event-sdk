#!/bin/bash

BOUNDARY_SDK_HOME=$1

if [ ! -d "$BOUNDARY_SDK_HOME" -o  ! -r "$BOUNDARY_SDK_HOME" ]
then
   echo "BOUNDARY_SDK_HOME needs to be set to build supporting tools"
   exit 1
fi

if [ -z "$JAVA_HOME" ]
then
  echo "JAVA_HOME needs to be set to the location of your java installation"
fi

if [ -r "$BOUNDARY_SDK_HOME/env.sh" ]
then
  source "$BOUNDARY_SDK_HOME/env.sh"
else
  echo "Failed to source $BOUNDARY_SDK_HOME/env.sh"
  exit 1
fi

# Get the operating system we are running, unix flavors only at this point
OPERATING_SYSTEM_NAME=$(uname -s)

case $OPERATING_SYSTEM_NAME in
    Darwin|Linux)
        BINARY_PATH="$BOUNDARY_SDK_HOME/src/native/unix/jsvc"
        pushd "$BOUNDARY_SDK_HOME/src/native/unix"
        ;;
esac

BUILD_STATE_DIR=.boundary.build.state
STATE_FILE="$BUILD_STATE_DIR/$(basename $BASH_SOURCE[0])"

# Check to see if we need to build
#if [ -e ! "$BINARY_PATH" -e "$STATE_FILE" -a "$BASH_SOURCE[0]" -ot "$STATE_FILE" ]
#then
#  exit 0
#fi

# Generate the configure script
support/buildconf.sh
if [ $? -ne 0 ]
then
  echo "Generation of config file failed."
  exit 1
fi

# Configure for the platform we are running on
./configure
if [ $? -ne 0 ]
then
  echo "configure failed for $OPERATING_SYSTEM_NAME"
  exit 1
fi

# Build the binary
make
if [ $? -ne 0 ]
then
  echo "make failed for $OPERATING_SYSTEM_NAME"
  exit 1
fi

# Install the binary to the target directory
BUILD_DIR="$BOUNDARY_SDK_HOME/target/bin"
mkdir -p "$BUILD_DIR"
cp "$BINARY_PATH" "$BUILD_DIR"
if [ $? -ne 0 ]
then
  echo "cp $BINARY_PATH $BUILD_DIR failed!"
  exit 1
fi

# Return from whence we came
popd

# Set our state that indicates that we have run
#touch "$BUILD_STATE_DIR/$(basename $BASH_SOURCE[0])




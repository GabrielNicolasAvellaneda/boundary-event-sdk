#!/bin/bash  

set -x

BOUNDARY_SDK_HOME=$1

[[ -z "$BOUNDARY_SDK_HOME" ]]  && echo "BOUNDARY_SDK_HOME is not set. Set to top-level directory of the distribution" && exit 1

DOWNLOAD_DIR="$BOUNDARY_SDK_HOME/download"

#
# Parameters for SNMP4J-SMI 
#
SNMP4J_SMI_DIR='snmp4j-smi-pro-1.4.2'
SNMP4J_SMI_ZIP_FILE="${SNMP4J_SMI_DIR}-dist.zip"
SNMP4J_SMI_JAR_FILE='snmp4j-smi-pro.jar'
SNMP4J_SMI_JAR_FILE_PATH="$DOWNLOAD_DIR/$SNMP4J_SMI_DIR/$SNMP4J_SMI_JAR_FILE"
SNMP4J_SMI_group_id="com.snmp4j"
SNMP4J_SMI_artifact_id="snmp4j-smi-pro"
SNMP4J_SMI_version="1.4.2"
SNMP4J_SMI_URI="http://www.snmp4j.com/smi/pro/$SNMP4J_SMI_ZIP_FILE"


#
# Parameters for SNMP4J
#
SNMP4J_DIR='snmp4j-smi-pro-1.4.2/lib'
SNMP4J_JAR_FILE='snmp4j-2.3.0.jar'
SNMP4J_JAR_FILE_PATH="$DOWNLOAD_DIR/$SNMP4J_DIR/$SNMP4J_JAR_FILE"
SNMP4J_group_id="org.snmp4j"
SNMP4J_artifact_id="snmp4j"
SNMP4J_version="2.3.0"

CURL_CMD=curl
WGET_CMD=wget
UNZIP_CMD=unzip
INSTALL_JAR_CMD="$BOUNDARY_SDK_HOME/src/main/scripts/install-jar"
MIB_REPO_INSTALL_DIR="$BOUNDARY_SDK_HOME/target/classes/mibrepository"

Usage()
{
  echo "usage $(basename $0)"
}

CheckForPreqs()
{
   typeset -i rc=0

   # Check to see if either curl or wget are available
   type "$WGET_CMD" > /dev/null 2>&1
   if [ $? -ne 0 ]
   then
     type "$CURL_CMD" > /dev/null 2>&1
     if [ $? -ne 0 ]     
     then
       rc=1
       echo "Could not find either ${WGET_CMD} or ${CURL_CMD} commands. Please install ${WGET_CMD} or ${CURL_CMD} and run the installation script again"
     else
       DOWNLOAD_CMD="$CURL_CMD"
     fi
   else
    DOWNLOAD_CMD="$WGET_CMD"
   fi

   # Check to see if unzip is available
   type "$UNZIP_CMD" > /dev/null 2>&1
   if [ $? -ne 0 ]
   then
       rc=1
       echo "Could not find ${UNZIP_CMD} command. Please install ${UNZIP_CMD} and run the installation script again"
   fi

   # Check for the install jar script
   type "$INSTALL_JAR_CMD" > /dev/null 2>&1
   if [ $? -ne 0 ]
   then
      rc=1
      echo "Could not find ${INSTALL_JAR_CMD} command. ${INSTALL_JAR_CMD} should be located in the directory ${BOUNDARY_SDK_HOME}/src/main/scripts"
   fi
   
   return $rc
}

curlDownloadDistribution()
{
  typeset -i rc=0
  typeset -r file="$1"
  typeset -r url="$2"

  curl "$url" -o "$file"
  rc=$?

  return $?
}

wgetDownloadDistribution()
{
  typeset -i rc=0
  typeset -r file="$1"
  typeset -r url="$2"

  wget "$url"
  rc=$?

  return $?
}

DownloadDistribution()
{
  typeset -i rc=0
  typeset -r download_dir="$1"
  typeset -r cmd="$2"
  typeset -r file="$3"
  typeset -r url="$4"

  pushd "$download_dir" > /dev/null 2>&1

  # Remove old one if it exists
  if [ -r "$file" ]
  then
    rm -f "$file"
  fi

  # Dispatch to the proper shell function
  rc=$("$cmd"DownloadDistribution "$file" "$url")

  popd > /dev/null 2>&1

  return $rc
}

ExtractDistributions()
{
  typeset rc=0
  typeset download_dir="$1"
  typeset dist_dir="$2"
  typeset file="$3"

  pushd "$download_dir" > /dev/null 2>&1

  '/bin/rm' -rf "$dist_dir"

  "$UNZIP_CMD" "$file"
  rc=$?

  popd > /dev/null 2>&1

  return $rc
}

InstallMIBRepository()
{
  typeset rc=0
  typeset -r mib_repo_source=$1
  typeset -r mib_repo_target=$2
 
  mkdir -p "$mib_repo_target"

  cp -R "$mib_repo_source" "$mib_repo_target"
  rc=$?

  return $rc
}

InstallJar()
{
  typeset rc=0
  typeset -r jar_path=$1
  typeset -r group_id=$2
  typeset -r artifact_id=$3
  typeset -r version=$4

  "$INSTALL_JAR_CMD" "$jar_path" "$group_id" "$artifact_id" "$version" 
  rc=$?

  return $rc
}

Main()
{

  CheckForPreqs
  if [ $? -ne 0 ]
  then
     exit 1
  fi

  mkdir -p "$DOWNLOAD_DIR"
  DownloadDistribution "$DOWNLOAD_DIR" "$DOWNLOAD_CMD" "$SNMP4J_SMI_ZIP_FILE" "$SNMP4J_SMI_URI" 
  if [ $? -ne 0 ]
  then
     "Error occurred while downloading the file $SNMP4j_SMI_ZIP_FILE from $SNMP4j_SMI_URI"
     exit 1
  fi

  ExtractDistributions "$DOWNLOAD_DIR" "$SNMP4J_SMI_DIR" "$SNMP4J_SMI_ZIP_FILE"
  if [ $? -ne 0 ]
  then
     "Error occurred while extracting the file $DOWNLOAD_DIR/$SNMP4j_SMI_ZIP_FILE"
     exit 1
  fi

  InstallJar "$SNMP4J_SMI_JAR_FILE_PATH" "$SNMP4J_SMI_group_id" "$SNMP4J_SMI_artifact_id" "$SNMP4J_SMI_version"
  if [ $? -ne 0 ]
  then
     "Error occurred while installing the jar file $SNMP4j_SMI_JAR_FILE_PATH"
     exit 1
  fi

  InstallJar "$SNMP4J_JAR_FILE_PATH" "$SNMP4J_group_id" "$SNMP4J_artifact_id" "$SNMP4J_version"
  if [ $? -ne 0 ]
  then
     "Error occurred while installing the jar file $SNMP4j_JAR_FILE_PATH"
     exit 1
  fi

  exit 0
}

Main $*


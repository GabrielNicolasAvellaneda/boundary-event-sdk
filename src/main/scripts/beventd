#!/bin/sh

# Set the location of the commons daemon binary 
EXEC=$BOUNDARY_SDK_HOME/bin/jsvc

# Contains all of the jars that the SDK is dependent
export LIB=$BOUNDARY_SDK_HOME/lib
CLASS_PATH=$(JARS=("$LIB"/*.jar); IFS=:; echo "${JARS[*]}")
# Add the Boundary Event SDK
# TBD: Generate version string during build.
#CLASS_PATH="${BOUNDARY_SDK_HOME}/boundary-event-sdk-${BOUNDARY_SDK_VERSION}.jar:${CLASS_PATH}"
# Assume only there is only one boundary-event-sdk jar file in the distribution.
CLASS_PATH="${BOUNDARY_SDK_HOME}/boundary-event-sdk-*.jar:${CLASS_PATH}"

# Entry point class to start the Boundary Event SDK
CLASS=com.boundary.sdk.event.BoundaryEventDaemon

# Daemon bindary, jsvc, will change to the user if run under root priviledges
USER=$USER
# Stores the process id of the running boundary event SDK instance
PID=${BOUNDARY_SDK_HOME}/var/beventd.pid
# Define output locations for logging of standard out and standard error
LOG_OUT=${BOUNDARY_SDK_HOME}/logs/beventd.log
LOG_ERR=${BOUNDARY_SDK_HOME}/logs/beventd.err.log
# Redirect standard error into standard out
LOG_ERR="&1"

do_exec()
{
    $EXEC -home "$JAVA_HOME" -cp "$CLASS_PATH" -user "$USER" -server -Dboundary.application.context.uri="file:$BOUNDARY_SDK_HOME/etc/event-application.xml" -outfile "$LOG_OUT" -errfile "$LOG_ERR" -pidfile "$PID" $1 "$CLASS"
}

case "$1" in
    start)
        do_exec
            ;;
    stop)
        do_exec "-stop"
            ;;
    restart)
        if [ -f "$PID" ]; then
            do_exec "-stop"
            do_exec
        else
            echo "$(basename $0) service not running, will do nothing"
            exit 1
        fi
            ;;
    *)
            echo "usage: $(basename $0) {start|stop|restart}" >&2
            exit 3
            ;;
esac

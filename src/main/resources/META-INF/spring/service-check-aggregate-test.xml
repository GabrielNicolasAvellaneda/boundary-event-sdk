 <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
                   http://www.springframework.org/schema/beans
                   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                   http://camel.apache.org/schema/spring
                   http://camel.apache.org/schema/spring/camel-spring.xsd">
                   
    <!-- Definition of the route that communicates with the Boundary API host -->
	<bean id="boundary-event-route" class="com.boundary.sdk.event.BoundaryEventRouteBuilder">
	
		<property name="routeId" value="BOUNDARY-EVENT"/>
		<!-- This route needs to start first and stop last so all routes
		     then send events to the boundary event route need to be
                     configured with a start order higher than 100
		  -->
		<property name="startUpOrder" value="1000"/>
		<!-- TBD: Encryption of apiKey using Camel APIs -->
		
		<!-- Boundary organization ID and API key can obtained by logging into the web
		     console. Organization ID and API key are located in the users settings
		  -->
		<!-- <property name="orgId" value="#{systemEnvironment['BOUNDARY_ORG_ID']}"/> -->
		<property name="orgId" value="3ehRi7uZeeaTN12dErF5XOnRXjC"/>
		
		<!-- <property name="apiKey" value="#{systemEnvironment['BOUNDARY_API_KEY']}"/> -->
		<property name="apiKey" value="Aqixh4Vt6j10d75Yg9zPrKvDLWc"/>

         <!-- The endpoint URI to listen for boundary events -->
		<property name="fromUri" value="seda:boundary-event?concurrentConsumers=10"/>
	</bean>

	<!-- Define our service test aggregator that receives Service Test configuration -->
	<bean id="aggregator" class="com.boundary.sdk.event.service.ServiceCheckAggregate"/>
	
	<!-- Responsible for routing Service Test Configurations to their proper route -->
	<bean id="router" class="com.boundary.sdk.event.service.ServiceCheckRouter"/>
	
	<!-- Extracts the specific service test configuration from a ServiceTest generic instance -->
	<bean id="configurationProcessor" class="com.boundary.sdk.event.service.ExtractServiceTestConfiguration"/>
	
	<bean id="ping-to-event" class="com.boundary.sdk.event.service.ping.PingInfoToEventProcessor"/>
	
	<bean id="port-to-event" class="com.boundary.sdk.event.service.port.PortInfoToEventProcessor"/>
	
	
	<!-- Handles the processing of service checks to raw events	 -->
<!-- 	<bean id="correlationProcessor" class="com.boundary.sdk.event.service.ServiceCheckToRawEvent"/> -->
	
	<!-- Extracts the specific service test configuration from a ServiceTest generic instance -->
<!-- 	<bean id="requestHeaders" class="com.boundary.sdk.event.service.SetServiceCheckHeaders"/>  -->	

	<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
	    <routeBuilder ref="boundary-event-route"/>
	
		<endpoint id ="ping-event-out" uri ="mock:ping-event-out"/>
		<endpoint id ="port-event-out" uri ="mock:port-event-out"/>
		<endpoint id ="boundary-event" uri ="seda:boundary-event"/>
	
		<route id="service-check-request-split" startupOrder="10">
		
			<!-- Receives messages with Service Requests -->
			<from uri="direct:service-check-request-in"/>
			
			<!-- We set a header so that we can correlate the Service Request and Service Tests -->
			<setHeader headerName ="serviceCheckRequestId">
				<simple>${body.requestId}</simple>
			</setHeader>
			<setHeader headerName = "serviceCheckRequestInstance">
				<simple>bodyAs(com.boundary.sdk.event.service.ServiceCheckRequest)</simple>
			</setHeader>
			<log message="RequestId: ${headers.serviceCheckRequestId}"/>
			<split parallelProcessing="true">
			<!-- Split into multiple messages based on the Service Tests in the Service Request instance -->
			<simple>${body.serviceTests}</simple >
				<log message="Processing message[${property.CamelSplitIndex}]"/>
				<log message="${headers}"/>
				<to uri="mock:service-check-request-split"/>
				<to uri="seda:service-checks-router"/>
				<to uri="stream:out"/>
			</split>
		</route>
		
		<route id="dynamic-router" startupOrder="20">
			<from uri="seda:service-checks-router"/>
			<setHeader headerName="serviceTestName">
				<simple>${body.name}</simple>
			</setHeader>
			<log message="serviceCheck=${headers.serviceTestName},serviceCheckRequest=${headers.serviceCheckRequest}"/>
			<to uri="mock:service-checks-router-out"/>
			<choice>
				<when>
					<simple>${body.name} == "ping"</simple>
					<to uri ="seda:ping-check"/>
					<log message="Sending to ping-check"/>
				</when>
				<when>
					<simple>${body.name} == "port"</simple>
					<to uri ="seda:port-check"/>
					<log message="Sending to port-check"/>
				</when>
			</choice>
		</route>
	
		<route id ="port-check" startupOrder="100">
			<from uri="seda:port-check"/>
			<log message="${headers}"/>
			<bean ref="configurationProcessor" method="extractPortConfiguration"/>
			<to uri="port://tcp"/>
			<to uri="mock:port-out"/>
			<bean ref="port-to-event" method="portInfoToRawEvent"/>
			<to uri="mock:port-event-out"/>
			<to uri="stream:out"/>
			<marshal>
				<serialization/>
			</marshal>
			<to ref="boundary-event"/>
		</route>
		
		<route id ="ping-check" startupOrder="200">
			<from uri="seda:ping-check"/>
			<log message="${headers}"/>
			<bean ref="configurationProcessor" method="extractPingConfiguration"/>
			<to uri="ping://icmp"/>
			<bean ref="ping-to-event" method="pingInfoToRawEvent"/>
			<to uri="mock:ping-event-out"/>
			<to uri="stream:out"/>
			<marshal>
				<serialization/>
			</marshal>
			<to ref="boundary-event"/>
		</route>
		
		<route id="service-check-aggregate" startupOrder="300">
			<from uri="seda:service-check-aggregate"/>
			<log message="${headers}"/>
			<aggregate strategyRef="aggregator" completionSize="3">
				<correlationExpression>
					<simple>${headers.serviceCheckRequestId}</simple>
				</correlationExpression>
				<removeHeader headerName="serviceTestInstance"/>
				<removeHeader headerName="serviceTestName"/>
				<log message="${headers}"/>
				<to uri="mock:service-check-aggregate-out"/>
				<to uri="stream:out"/>
				<to uri="seda:service-check-aggregate-out"/>
			</aggregate>
		</route>
<!-- 		
		<route id="service-test-correlation" startupOrder="400">
			<from uri="seda:service-check-aggregate-out"/>
			<log message="${headers} : ${body}"/>
			<bean ref="correlationProcessor" method="extractPingConfiguration"/>
			<to uri="mock:service-test-correlation-out"/>
			<to uri="stream:out"/>
		</route>
 -->
	</camelContext>
</beans>